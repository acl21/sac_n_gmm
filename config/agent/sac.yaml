agent:
  name: sac
  _target_: sac_gmm.agents.sac.SACAgent
  params:
    obs_dim: ??? # to be specified later
    action_dim: ??? # to be specified later
    action_range: ??? # to be specified later
    device: ${device}
    critic_cfg: ${double_q_critic}
    actor_cfg: ${diag_gaussian_actor}
    autoencoder_cfg: ${autoencoder}
    discount: 0.99
    init_temperature: 0.1
    alpha_lr: 3e-4
    alpha_betas: [0.9, 0.999]
    actor_lr: 3e-4
    actor_betas: [0.9, 0.999]
    actor_update_frequency: 1
    critic_lr: 3e-4
    critic_betas: [0.9, 0.999]
    critic_tau: 0.005
    critic_target_update_frequency: 2
    batch_size: 256
    learnable_temperature: true
    ae_lr: 3e-5

double_q_critic:
  _target_: sac_gmm.networks.critic.DoubleQCritic
  params:
    obs_dim: ${agent.params.obs_dim}
    action_dim: ${agent.params.action_dim}
    hidden_dim: 256
    hidden_depth: 2

diag_gaussian_actor:
  _target_: sac_gmm.networks.actor.DiagGaussianActor
  params:
    obs_dim: ${agent.params.obs_dim}
    action_dim: ${agent.params.action_dim}
    hidden_depth: 2
    hidden_dim: 256
    log_std_bounds: [-5, 2]

autoencoder:
  _target_: sac_gmm.networks.autoencoder.AutoEncoder
  params:
    hd_input_space: ??? # to be specified later
    in_channels: ??? # to be specified later
    hidden_dim: 8
    late_fusion: false
    latent_lambda: 0


hd_input_network:
  _target_: sac_gmm.networks.hd_input_net.HDInputNetwork
  params:
    autoencoder_cfg: ${autoencoder}